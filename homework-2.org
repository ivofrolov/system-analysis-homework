* Поддомены
Главная проблема, которую решает компания, или бизнес домен - это обеспечить тестировщикам нормальный отдых, избавив их от рутинных дел.

Выделены следующие поддомены.
- *Найм и матчинг воркеров*,
  потому что это главное конкурентное преимущество: содержать тщательно отобранный пул лучших специалистов под потребности разных клиентов. Матчинг при этом сильно связан с наймом в контексте тестирования для выявления характеристик воркеров. Иначе как еще матчить?
- *Продажа услуг клиентам*,
  потому что надо обеспечить возможность клиентам оставлять заказы и получать конкурентную цену, что является изолированным процессом, нацеленным только на клиентов. В этот поддомен также входят и расчеты с клиентами, потому что завязаны на заказы.
- *Управление задачами воркеров*,
  чтобы контролировать исполнение заказов, что тоже является отельным процессом с уникальными инструментами. Сюда входят и расчеты с воркерами, потому что завязаны на задачи и имеют уникальные правила.
- *Сборка расходных материалов*,
  чтобы воркеры получали все необходимое для работы, а клиенты - печенье. Отдел сборки является самостоятельным.
- *Контроль качества*,
  чтобы снижать количество проблем с заказами. Существует специальный отдел, занятый этим.
- *Тотализатор*,
  чтобы повышать мотивацию менеджеров. Должен находиться в изолированной серой зоне.

* Типы поддоменов

| Поддомен                     | Конкурентное преимущество | Сложность доменной модели | Изменчивость | Варианты реализации | Интерес проблемы | Предполагаемый тип поддомена |
|------------------------------+---------------------------+---------------------------+--------------+---------------------+------------------+------------------------------|
| Найм и матчинг воркеров      | да                        | высокая                   | частая       | инхаус              | высокий          | core                         |
| Продажа услуг клиентам       | нет                       | высокая[fn:1]             | частая[fn:2] | инхаус[fn:1]        | низкий           | supporting                   |
| Управление задачами воркеров | нет                       | высокая[fn:1]             | редкая       | инхаус[fn:1]        | низкий           | supporting                   |
| Сборка расходных материалов  | нет                       | низкая                    | редкая       | no-code             | низкий           | generic                      |
| Контроль качества            | нет                       | низкая                    | редкая       | no-code             | низкий           | generic                      |
| Мотивация менеджеров         | нет                       | низкая                    | редкая       | инхаус              | низкий           | supporting                   |

[fn:1] из-за билинга
[fn:2] потому что отдел контроля качества будет поставлять гипотезы для улучшения взаимодействия клиентов с системой

[[file:diagrams/homework-2/core-domain-chart.jpg]]
#+BEGIN_HTML
<img src="diagrams/homework-2/core-domain-chart.jpg">
#+END_HTML

* Изолированные контексты
#+begin_src d2 :file diagrams/homework-2/subdomains-bounded-contexts.png
vars: {
  d2-config: {
    layout-engine: elk
    theme-id: 1
  }
}

classes: {
  core: {style: {fill: mediumseagreen}}
  supporting: {style: {fill: mediumpurple}}
  generic: {style: {fill: silver}}
}


Найм и матчинг воркеров {
  class: core

  Тестирование и найм
  Матчинг

  Тестирование и найм -> Матчинг
}

Продажа услуг клиентам {
  class: supporting

  Управление заказами клиентов
  Управление расчетами с клиентами

  Управление заказами клиентов -> Управление расчетами с клиентами
  Управление заказами клиентов <- _.Найм и матчинг воркеров.Матчинг
}

УправлениеЗадачами: Управление задачами воркеров {
  class: supporting

  Трекер задач
  Управление расчетами с воркерами

  Трекер задач -> Управление расчетами с воркерами
  Трекер задач <- _.Продажа услуг клиентам.Управление заказами клиентов
}

Сборка расходных материалов {
  class: generic

  Контроль выдачи расходников

  Контроль выдачи расходников <- _.Продажа услуг клиентам.Управление заказами клиентов
}

Контроль качества {
  class: generic

  Отслеживание заказов

  Отслеживание заказов <- _.Продажа услуг клиентам.Управление заказами клиентов
}

Мотивация менеджеров {
  class: supporting

  Тотализатор

  Тотализатор <- _.Продажа услуг клиентам.Управление заказами клиентов
}
#+end_src

#+RESULTS:
[[file:diagrams/homework-2/subdomains-bounded-contexts.png]]
#+BEGIN_HTML
<img src="diagrams/homework-2/subdomains-bounded-contexts.png">
#+END_HTML

* Скорректированные модели

- Матчинг был выделен как изолированный контекст в поддомене управления заказами.
- Билинг был разделен на две части, каждая из которых помещена в свой поддомен: расчеты с клиентами в поддомен продажи услуг, расчеты с воркерами - в поддомен управления задачами.

** Event Storming

[[file:diagrams/homework-2/event-storming-model.jpg]]
#+BEGIN_HTML
<img src="diagrams/homework-2/event-storming-model.jpg">
#+END_HTML

** Data Model
#+begin_src d2 :file diagrams/homework-2/data-model.png
vars: {
  d2-config: {
    layout-engine: elk
    theme-id: 1
  }
}

classes: {
  read: {
    style: {
      stroke: green
    }
  }
}

Legend: {
  MasterData: Master Data
  ReadData: Read Data {class: read}

  Field <- MasterData: relationship
  MasterData -> ReadData: streaming communication {class: read}
}


НаймМатчинг: Найм и матчинг воркеров {
  Кандидат -> Заявка: один
  Воркер <- Кандидат: ноль или один
  Кандидат -> Результат: много
  Тест -> Результат: один
  НаборТестов -> Тест: много

  НаборТестов: Набор тестов
}

ПродажаУслуг: Продажа услуг клиентам {
  Клиент -> Заказ: много
  Заказ -> Статус: один
  Заказ -> Стоимость: один
  Заказ -> Воркер: один

  Клиент -> Способ оплаты: один
  Клиент -> Счет на оплату клиента: много
  Клиент -> Скидка: один

  Воркер <- _.НаймМатчинг.Воркер: {class: read}
  Воркер: {class: read}
}

Сборка расходных материалов: {
  ЗаказНаСборку -> Отметка о выполнении: один

  ЗаказНаСборку <- _.ПродажаУслуг.Заказ: {class: read}
  ЗаказНаСборку: Заказ на сборку {class: read}
}

УправлениеЗадачами: Управление задачами воркеров {
  Задача -> ОтметкаНачал: один
  ОтметкаНачал -> Фотография: один
  Задача -> ОтметкаВыполнил: один
  ОтметкаВыполнил -> Акт: один

  Воркер -> Счет в Золотой шляпе: один
  Воркер -> Счет на выплату воркеру: много
  Воркер -> Баланс: один

  Задача <- _.ПродажаУслуг.Заказ: {class: read}
  Задача: {class: read}

  ОтметкаНачал: Отметка о начале работы
  ОтметкаВыполнил: Отметка о выполнении работы
}

КонтрольКачества: Контроль качества {
  Заказ -> Отчет: один

  Заказ <- _.ПродажаУслуг.Заказ: {class: read}
  Заказ: {class: read}
}

Мотивация менеджеров: {
  Заказ -> Ставка менеджера: много

  Заказ <- _.ПродажаУслуг.Заказ: {class: read}
  Заказ: {class: read}
}
#+end_src

#+RESULTS:
[[file:diagrams/homework-2/data-model.png]]
#+BEGIN_HTML
<img src="diagrams/homework-2/data-model.png">
#+END_HTML

* Важные характеристики

- *Agility*,
  потому что функционал core поддомена еще только на стадии гипотез и важно быстро их проверять [US-060].
- *Deployability*, *Testability*,
  потому что нужен низкий TTM.
- *Elasticity*,
  потому что есть риск DDOS [US-081].
- *Modifiability*, *Maintainability*, *Scalability*,
  потому что компания находится в начале пути и планирует расширяться в будущем.

* Архитектурный стиль

*Микросервисы* подходят по всем выбранным характеристикам.

#+begin_src d2 :file diagrams/homework-2/services-communications.png
vars: {
  d2-config: {
    layout-engine: elk
    theme-id: 1
  }
}


Тестирование и найм -> Матчинг: синхронно

Управление заказами клиентов <- Управление расчетами с клиентами: синхронно
Управление заказами клиентов -> Матчинг: синхронно

Контроль выдачи расходников <- Управление заказами клиентов: асинхронно

Трекер задач <- Управление расчетами с воркерами: синхронно
Трекер задач <- Управление заказами клиентов: асинхронно

Отслеживание заказов <- Управление заказами клиентов: асинхронно

Тотализатор <- Управление заказами клиентов: асинхронно
#+end_src

#+RESULTS:
[[file:diagrams/homework-2/services-communications.png]]

Контроль выдачи расходников несмотря на его простоту [US-140] выделен в отдельный мкс, потому что, во-первых, это поддомен с собственным путем развития, а во-вторых - микросервисная архитектура подразумевает легкость внедрения новых сервисов.

Несмотря на то, что жизненный цикл заказа клиента можно сказать проходит через другой поддомен, управление задачами воркеров, строгая согласованность не нужна, потому что клиент платит за заказ в любом состоянии [US-111], или другими словами работа считается выполненной с момента создания заказа. Контроль качества вопрос отдельный, которым занимается специальный отдел. Поэтому выбранная асинхронная коммуникация предполагается не очень сложной.

* Замечания

Билинг из первой итерации решено было разделить на две части и поместить их в существующие поддомены, что усложнило модели. Но с другой стороны эти выделенные контексты решают разные проблемы, и каждый тесно связан с контекстом внутри поддомена: заказами клиентов и задачами воркеров.
