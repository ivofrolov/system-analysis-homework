* Общее описание системы
#+BEGIN_HTML
<img src="diagrams/homework-0/system.svg">
#+END_HTML

В системе существует четыре роли пользователей: воркер, клиент, менеджер и сборщик с разными наборами возможностей.

Предполагается программная интеграция с эквайрингом для приема оплаты, системой расчетов "Золотая шляпа" и произодителем печенья.

* Компоненты системы
#+BEGIN_HTML
<img src="diagrams/homework-0/components.svg">
#+END_HTML

*** Сервисы

В системе можно выделить четыре отдельных приложения: микросервис отбора воркеров, микросервис рассылки уведомлений, приложение для телефона воркера и монолит, в котором сосредоточена большая часть функций. Монолит был выбран потому, что на начальном этапе разработки он обеспечивает приемлемый TTM за счет более понятной структуры и менее затратного обслуживания в сравнении с микросервисами. Однако системы уведомлений и отбора воркеров все же выделены в отдельные приложения.

Уведомления слабо связаны с остальными компонентами, предполагают скорее односторонний способ взаимодействия с ними, и позволят наметить возможный распил монолита с ростом компании.

К системе же отбора предъявлены специальные требования по скорости разработки и надежности.

У воркера должно быть удобное мобильное приложение для удаленной работы с заказами.

*** Взаимодействие

Для взаимодействия между приложениями предполагается использовать HTTP протокол в RPC стиле, как наиболее простом и понятным разработчикам.

*** Структура монолита

Интерфейсы для пользователей были выделены в отдельные компоненты, потому что они будут работать с под разными наборами прав и в некоторых случаях многими компонентами системы. Кроме того для разработки в основном будут использоваться отличные от остальной части монолита технологии и хотелось бы максимально распараллелить работу над ними.

Компонент заявок клиентов выделяется естественным образом.

Требования к матчингу и расчету стоимости не полны, но уже ясно, что будут дополняться и изменяться, поэтому безопасно будет выделить их в отдельные компоненты.

Контроль качества и билинг реализуют специфические процессы.

** Замечания

Компонент заявок клиентов получился слишком большим. Он не является наиболее критичным компонентом (таковым является система отбора), но получился этаким ядром системы. Есть ли способ его разделить?

Есть ли специфичные требования к билингу (законодательства например), чтобы была необходимость выделить его в отдельное приложение? Кроме того работа с деньгами клиентов всегда критична.
