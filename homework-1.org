* Event Storming Model
#+BEGIN_HTML
<img src="diagrams/homework-1/event-storming-model.jpg">
#+END_HTML

Нотификации на схеме не показаны, потому что рассылаются практически на каждое событие и не блокируют процессы.

Команды и события были сгруппированы в контексты в основном по областям ответственности ролей пользователей, которым требуются разные данные для принятия решений. То есть,
- клиентам важно иметь возможность управлять заказами,
- работникам склада - выполнять заказы на сборку расходников,
- воркерам - отчитываться о выполнении задач,
- менеджерам по качеству - получать заказы на проверку,
- менеджерам по найму - управлять тестированием кандидатов,
- бухгалтерам - контролировать расчеты.

Билинг является критичным контекстом, потому что работает с деньгами.

Тотализатор был выделен в отдельный контекст из-за серой зоны, в которой он должен находиться.

* Модель данных
#+BEGIN_HTML
<img src="diagrams/homework-1/data-model.svg">
#+END_HTML

* Модель коммуникаций
#+BEGIN_HTML
<img src="diagrams/homework-1/communications-model.svg">
#+END_HTML

* Реализация проекта

Монолит, потому что недорог и обеспечивает приемлемый TTM. Контексты связаны между собой подписками на события для автоматического запуска зависимых процессов и уведомлений. Модели для чтения в БД связываются с владельцами ключами, чего достаточно во всех случаях.

Микросервисная архитектура не рассматривалась, потому что начинать всегда безопаснее с монолита.

* Замечания

Система матчинга не была показана на схеме из-за неясных пока требований, но ее можно будет выделить в будущем.

Система расчета стоимости заказа не была показана на схеме, хотя клиенту скорее всего будет важно видеть эту цифру с учетом скидки. Но расчет стоимости завязан на матчинг (на стоимость услуги воркера), требования к которому пока не ясны.
